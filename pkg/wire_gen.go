// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package pkg

import (
	"github.com/gorilla/mux"
	"github.com/naftulikay/golang-webapp/pkg/dao"
	"github.com/naftulikay/golang-webapp/pkg/database"
	"github.com/naftulikay/golang-webapp/pkg/interfaces"
	"github.com/naftulikay/golang-webapp/pkg/service"
	"github.com/naftulikay/golang-webapp/pkg/types"
)

import (
	_ "github.com/swaggo/swag"
)

// Injectors from injectors.go:

func initializeApp(appCfg interfaces.AppConfig, jwtKey types.JWTKey, rootLogger types.RootLogger) (interfaces.App, error) {
	mySQLConfig := database.ExtractMySQLConfig(appCfg)
	appLogger := types.NewAppLogger(rootLogger)
	databaseLogger := types.NewDatabaseLogger(appLogger)
	db, err := database.Connect(mySQLConfig, databaseLogger)
	if err != nil {
		return nil, err
	}
	userDaoLogger := types.NewUserDaoLogger(appLogger)
	userDaoImpl := dao.NewUserDao(db, userDaoLogger)
	appDaosImpl := service.NewAppDaos(userDaoImpl)
	jwtServiceLogger := types.NewJWTServiceLogger(appLogger)
	jwtServiceImpl, err := service.NewJWTService(jwtKey, jwtServiceLogger)
	if err != nil {
		return nil, err
	}
	loginServiceLogger := types.NewLoginServiceLogger(appLogger)
	loginServiceImpl := service.NewLoginService(userDaoImpl, jwtServiceImpl, loginServiceLogger)
	appServicesImpl := service.NewAppServices(jwtServiceImpl, loginServiceImpl)
	router := mux.NewRouter()
	appImpl := service.NewApp(appCfg, db, appDaosImpl, appServicesImpl, router, appLogger, rootLogger)
	return appImpl, nil
}
